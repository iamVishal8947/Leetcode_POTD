                                                              -----------------
                                                                 Approach 1  
                                                              -----------------

Time Complexity - O(n).
Space Complexity - O(n)

--------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] findErrorNums(int[] nums) {
        int [] ans=new int[2];
        Map<Integer,Integer> mp=new HashMap<>();
        for(int a:nums){
            mp.put(a,mp.getOrDefault(a,0)+1);
        }

        for(int i=1;i<=nums.length;i++){
            if(mp.containsKey(i)){
                if(mp.get(i)==2){
                    ans[0]=i;
                }
            }
            else{
                ans[1]=i;
            }
        }
        return ans;      
    }
}



======================================================================================================================================================================================


                                                                    --------------
                                                                      Approach 2
                                                                    --------------


Time Complexity - O(n)
Space Complexity - O(1) 

class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] ans=new int[2];
        int n=nums.length;
        for (int i = 0; i < n; i++) {
            int num = Math.abs(nums[i]);
            
            if (nums[num - 1] < 0)
                ans[0]=num;
            else
                nums[num - 1] *= (-1);
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) {
                ans[1] = i + 1;
                break;
            }
        }

        return ans;
            
    }
}
